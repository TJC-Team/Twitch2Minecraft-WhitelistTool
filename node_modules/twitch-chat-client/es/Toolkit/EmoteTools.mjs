/// <reference lib="esnext.array" />
import { __read, __spread, __values } from "tslib";
import { utf8Length, utf8Substring } from '@d-fischer/shared-utils';
/** @private */
export function parseEmoteOffsets(emotes) {
    if (!emotes) {
        return new Map();
    }
    return new Map(emotes
        .split('/')
        .map(function (emote) {
        var _a = __read(emote.split(':', 2), 2), emoteId = _a[0], placements = _a[1];
        if (!placements) {
            return null;
        }
        return [emoteId, placements.split(',')];
    })
        .filter(function (e) { return e !== null; }));
}
/** @private */
export function parseEmotePositions(message, emoteOffsets) {
    return __spread(emoteOffsets.entries()).flatMap(function (_a) {
        var _b = __read(_a, 2), emote = _b[0], placements = _b[1];
        return placements.map(function (placement) {
            var _a = __read(placement.split('-'), 2), startStr = _a[0], endStr = _a[1];
            var start = +startStr;
            var end = +endStr;
            return {
                type: 'emote',
                position: start,
                length: end - start + 1,
                id: emote,
                name: utf8Substring(message, start, end + 1)
            };
        });
    })
        .sort(function (a, b) { return a.position - b.position; });
}
/** @private */
export function fillTextPositions(message, otherPositions) {
    var e_1, _a;
    var messageLength = utf8Length(message);
    if (!otherPositions.length) {
        return [
            {
                type: 'text',
                position: 0,
                length: messageLength,
                text: message
            }
        ];
    }
    var result = [];
    var currentPosition = 0;
    try {
        for (var otherPositions_1 = __values(otherPositions), otherPositions_1_1 = otherPositions_1.next(); !otherPositions_1_1.done; otherPositions_1_1 = otherPositions_1.next()) {
            var token = otherPositions_1_1.value;
            if (token.position > currentPosition) {
                result.push({
                    type: 'text',
                    position: currentPosition,
                    length: token.position - currentPosition,
                    text: utf8Substring(message, currentPosition, token.position)
                });
            }
            result.push(token);
            currentPosition = token.position + token.length;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (otherPositions_1_1 && !otherPositions_1_1.done && (_a = otherPositions_1.return)) _a.call(otherPositions_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (currentPosition < messageLength) {
        result.push({
            type: 'text',
            position: currentPosition,
            length: messageLength - currentPosition,
            text: utf8Substring(message, currentPosition)
        });
    }
    return result;
}
