import { __awaiter, __extends, __generator } from "tslib";
import { Socket } from 'net';
import * as tls from 'tls';
import { AbstractConnection } from "./AbstractConnection.mjs";
var DirectConnection = /** @class */ (function (_super) {
    __extends(DirectConnection, _super);
    function DirectConnection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DirectConnection.prototype, "port", {
        get: function () {
            return this._port;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DirectConnection.prototype, "hasSocket", {
        get: function () {
            return !!this._socket;
        },
        enumerable: false,
        configurable: true
    });
    DirectConnection.prototype.sendRaw = function (line) {
        var _a;
        (_a = this._socket) === null || _a === void 0 ? void 0 : _a.write(line);
    };
    DirectConnection.prototype.connect = function () {
        var _a;
        return __awaiter(this, void 0, Promise, function () {
            var _this = this;
            return __generator(this, function (_b) {
                (_a = this._logger) === null || _a === void 0 ? void 0 : _a.trace('DirectConnection connect');
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this._connecting = true;
                        if (_this._secure) {
                            _this._socket = tls.connect(_this._port, _this._host);
                        }
                        else {
                            _this._socket = new Socket();
                            _this._socket.connect(_this._port, _this._host);
                        }
                        _this._socket.on('connect', function () {
                            var _a;
                            (_a = _this._logger) === null || _a === void 0 ? void 0 : _a.trace('DirectConnection onConnect');
                            _this._connecting = false;
                            _this._connected = true;
                            _this.emit(_this.onConnect);
                            resolve();
                        });
                        _this._socket.on('error', function (err) {
                            var _a;
                            (_a = _this._logger) === null || _a === void 0 ? void 0 : _a.trace("DirectConnection onError message:" + err.message);
                            _this._connected = false;
                            _this._connecting = false;
                            _this.emit(_this.onDisconnect, false, err);
                            reject(err);
                        });
                        _this._socket.on('data', function (data) {
                            _this.receiveRaw(data.toString());
                        });
                        _this._socket.on('close', function (hadError) {
                            var _a;
                            (_a = _this._logger) === null || _a === void 0 ? void 0 : _a.trace("DirectConnection onClose hadError:" + hadError);
                            if (!hadError) {
                                _this._connected = false;
                                _this._connecting = false;
                                _this.emit(_this.onDisconnect, true);
                            }
                        });
                    })];
            });
        });
    };
    DirectConnection.prototype.disconnect = function () {
        var _a;
        return __awaiter(this, void 0, Promise, function () {
            var _this = this;
            return __generator(this, function (_b) {
                (_a = this._logger) === null || _a === void 0 ? void 0 : _a.trace('DirectConnection disconnect');
                return [2 /*return*/, new Promise(function (resolve) {
                        var _a;
                        var listener = _this.onDisconnect(function () {
                            listener.unbind();
                            resolve();
                        });
                        (_a = _this._socket) === null || _a === void 0 ? void 0 : _a.end();
                        _this._socket = undefined;
                    })];
            });
        });
    };
    return DirectConnection;
}(AbstractConnection));
export { DirectConnection };
//# sourceMappingURL=DirectConnection.mjs.map