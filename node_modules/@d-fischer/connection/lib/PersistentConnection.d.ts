import type { Logger } from '@d-fischer/logger';
import type { Constructor } from '@d-fischer/shared-utils';
import type { EventHandler } from '@d-fischer/typed-event-emitter';
import { EventEmitter } from '@d-fischer/typed-event-emitter';
import type { Connection, ConnectionInfo } from './Connection';
export interface PersistentConnectionConfig {
    retryLimit?: number;
    logger?: Logger;
}
export declare class PersistentConnection<T extends Connection> extends EventEmitter implements Connection {
    private _type;
    private _connectionInfo;
    private readonly _retryLimit;
    private readonly _logger?;
    private _connecting;
    private _retryTimerGenerator?;
    private _connectionRetryCount;
    private _currentConnection?;
    readonly onReceive: (handler: EventHandler<[string]>) => import("@d-fischer/typed-event-emitter/lib").Listener;
    readonly onConnect: (handler: EventHandler<[]>) => import("@d-fischer/typed-event-emitter/lib").Listener;
    readonly onDisconnect: (handler: EventHandler<[boolean, (Error | undefined)?]>) => import("@d-fischer/typed-event-emitter/lib").Listener;
    readonly onEnd: (handler: EventHandler<[boolean, (Error | undefined)?]>) => import("@d-fischer/typed-event-emitter/lib").Listener;
    constructor(_type: Constructor<T>, _connectionInfo: ConnectionInfo, config?: PersistentConnectionConfig);
    get isConnected(): boolean;
    get isConnecting(): boolean;
    get host(): string;
    get port(): number;
    get hasSocket(): boolean;
    sendLine(line: string): void;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    assumeExternalDisconnect(): void;
    reconnect(): Promise<void>;
    private static _getReconnectWaitTime;
}
