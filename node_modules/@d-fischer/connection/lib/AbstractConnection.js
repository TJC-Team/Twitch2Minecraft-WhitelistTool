"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractConnection = void 0;
var tslib_1 = require("tslib");
var typed_event_emitter_1 = require("@d-fischer/typed-event-emitter");
var AbstractConnection = /** @class */ (function (_super) {
    tslib_1.__extends(AbstractConnection, _super);
    function AbstractConnection(_a, logger) {
        var hostName = _a.hostName, port = _a.port, secure = _a.secure, lineBased = _a.lineBased;
        var _this = _super.call(this) || this;
        _this._currentLine = '';
        _this._connecting = false;
        _this._connected = false;
        _this._manualDisconnect = false;
        _this.onReceive = _this.registerEvent();
        _this.onConnect = _this.registerEvent();
        _this.onDisconnect = _this.registerEvent();
        _this.onEnd = _this.registerEvent();
        _this._host = hostName;
        _this._port = port;
        _this._secure = secure !== null && secure !== void 0 ? secure : true;
        _this._lineBased = lineBased !== null && lineBased !== void 0 ? lineBased : false;
        _this._logger = logger;
        return _this;
    }
    Object.defineProperty(AbstractConnection.prototype, "isConnecting", {
        get: function () {
            return this._connecting;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractConnection.prototype, "isConnected", {
        get: function () {
            return this._connected;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbstractConnection.prototype, "host", {
        get: function () {
            return this._host;
        },
        enumerable: false,
        configurable: true
    });
    AbstractConnection.prototype.sendLine = function (line) {
        if (this._connected) {
            line = line.replace(/[\0\r\n]/g, '');
            this.sendRaw(line + "\r\n");
        }
    };
    AbstractConnection.prototype.assumeExternalDisconnect = function () {
        var _a;
        (_a = this._logger) === null || _a === void 0 ? void 0 : _a.trace('AbstrctConnection assumeExternalDisconnect');
        this._connected = false;
        this._connecting = false;
        this.emit(this.onDisconnect, false);
    };
    AbstractConnection.prototype.receiveRaw = function (data) {
        if (!this._lineBased) {
            this.emit(this.onReceive, data);
            return;
        }
        var receivedLines = data.split('\r\n');
        this._currentLine += receivedLines.shift() || '';
        if (receivedLines.length) {
            this.emit(this.onReceive, this._currentLine);
            this._currentLine = receivedLines.pop() || '';
            for (var _i = 0, receivedLines_1 = receivedLines; _i < receivedLines_1.length; _i++) {
                var line = receivedLines_1[_i];
                this.emit(this.onReceive, line);
            }
        }
    };
    return AbstractConnection;
}(typed_event_emitter_1.EventEmitter));
exports.AbstractConnection = AbstractConnection;
//# sourceMappingURL=AbstractConnection.js.map