"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogLevelToConsoleFunction = exports.resolveLogLevel = exports.LogLevel = void 0;
var isNode = require("detect-node");
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["CRITICAL"] = 0] = "CRITICAL";
    LogLevel[LogLevel["ERROR"] = 1] = "ERROR";
    LogLevel[LogLevel["WARNING"] = 2] = "WARNING";
    LogLevel[LogLevel["INFO"] = 3] = "INFO";
    /** @deprecated use DEBUG instead */
    LogLevel[LogLevel["DEBUG1"] = 4] = "DEBUG1";
    /** @deprecated use DEBUG instead */
    LogLevel[LogLevel["DEBUG2"] = 4] = "DEBUG2";
    /** @deprecated use DEBUG instead */
    LogLevel[LogLevel["DEBUG3"] = 4] = "DEBUG3";
    LogLevel[LogLevel["DEBUG"] = 4] = "DEBUG";
    LogLevel[LogLevel["TRACE"] = 7] = "TRACE";
})(LogLevel || (LogLevel = {}));
exports.LogLevel = LogLevel;
function resolveLogLevel(level) {
    if (typeof level === 'number') {
        if (Object.prototype.hasOwnProperty.call(LogLevel, level)) {
            return level;
        }
        var eligibleLevels = Object.keys(LogLevel)
            .map(function (k) { return parseInt(k, 10); })
            .filter(function (k) { return !isNaN(k) && k < level; });
        if (!eligibleLevels) {
            return LogLevel.WARNING;
        }
        return Math.max.apply(Math, eligibleLevels);
    }
    var strLevel = level.toUpperCase();
    if (!Object.prototype.hasOwnProperty.call(LogLevel, strLevel)) {
        throw new Error("Unknown log level string: " + strLevel);
    }
    return LogLevel[strLevel];
}
exports.resolveLogLevel = resolveLogLevel;
// Node 8+ defines console.debug as noop, and earlier versions don't define it at all
var debugFunction = isNode ? console.log.bind(console) : console.debug.bind(console);
// eslint-disable-next-line @typescript-eslint/no-explicit-any
exports.LogLevelToConsoleFunction = (_a = {},
    _a[LogLevel.CRITICAL] = console.error.bind(console),
    _a[LogLevel.ERROR] = console.error.bind(console),
    _a[LogLevel.WARNING] = console.warn.bind(console),
    _a[LogLevel.INFO] = console.info.bind(console),
    _a[LogLevel.DEBUG] = debugFunction.bind(console),
    _a[LogLevel.TRACE] = console.trace.bind(console),
    _a);
//# sourceMappingURL=LogLevel.js.map