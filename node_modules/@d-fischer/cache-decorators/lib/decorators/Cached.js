var __tsu = {
    cache: [],
    defineExport: function (name, def) {
        Object.defineProperty(exports, name, def);
        this.cache.push({ name: name, def: def });
    },
    redefineExports: function () {
        this.cache.forEach(function (exp) {
            Object.defineProperty(exports, exp.name, exp.def);
        });
    }
};
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var createCacheKey_1 = require("../utils/createCacheKey");
function Cached(timeInSeconds, cacheFailures) {
    if (timeInSeconds === void 0) { timeInSeconds = Infinity; }
    if (cacheFailures === void 0) { cacheFailures = false; }
    return function (target, propName, descriptor) {
        var origFn = descriptor.value;
        descriptor.value = function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var cacheKey, cachedValue, result;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            cacheKey = createCacheKey_1.default(propName, params);
                            cachedValue = this.getFromCache(cacheKey);
                            if (cachedValue) {
                                return [2 /*return*/, cachedValue];
                            }
                            return [4 /*yield*/, origFn.apply(this, params)];
                        case 1:
                            result = _a.sent();
                            if (result != null || cacheFailures) {
                                this.setCache(cacheKey, result, timeInSeconds);
                            }
                            return [2 /*return*/, result];
                    }
                });
            });
        };
        return descriptor;
    };
}
exports.default = Cached;
module.exports = exports = Cached;
Object.defineProperty(exports, "__esModule", { value: true });
__tsu.redefineExports();
exports.default = Cached;
//# sourceMappingURL=Cached.js.map