import { __extends } from "tslib";
import createCacheKey from "../utils/createCacheKey.mjs";
export default function Cacheable(cls) {
    return /** @class */ (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.cache = new Map();
            return _this;
        }
        class_1.prototype.getFromCache = function (cacheKey) {
            this._cleanCache();
            if (this.cache.has(cacheKey)) {
                var entry = this.cache.get(cacheKey);
                if (entry) {
                    return entry.value;
                }
            }
            return undefined;
        };
        class_1.prototype.setCache = function (cacheKey, value, timeInSeconds) {
            this.cache.set(cacheKey, {
                value: value,
                expires: Date.now() + timeInSeconds * 1000
            });
        };
        class_1.prototype.removeFromCache = function (cacheKey, prefix) {
            var _this = this;
            var internalCacheKey;
            if (typeof cacheKey === 'string') {
                internalCacheKey = cacheKey;
                if (!internalCacheKey.endsWith('/')) {
                    internalCacheKey += '/';
                }
            }
            else {
                var propName = cacheKey.shift();
                internalCacheKey = createCacheKey(propName, cacheKey, prefix);
            }
            if (prefix) {
                this.cache.forEach(function (val, key) {
                    if (key.startsWith(internalCacheKey)) {
                        _this.cache.delete(key);
                    }
                });
            }
            else {
                this.cache.delete(internalCacheKey);
            }
        };
        class_1.prototype._cleanCache = function () {
            var _this = this;
            var now = Date.now();
            this.cache.forEach(function (val, key) {
                if (val.expires < now) {
                    _this.cache.delete(key);
                }
            });
        };
        return class_1;
    }(cls));
}
//# sourceMappingURL=Cacheable.mjs.map