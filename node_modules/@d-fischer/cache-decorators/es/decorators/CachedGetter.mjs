import createCacheKey from "../utils/createCacheKey.mjs";
export default function CachedGetter(timeInSeconds) {
    if (timeInSeconds === void 0) { timeInSeconds = Infinity; }
    return function (target, propName, descriptor) {
        if (descriptor.get) {
            var origFn_1 = descriptor.get;
            descriptor.get = function () {
                var params = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    params[_i] = arguments[_i];
                }
                var cacheKey = createCacheKey(propName, params);
                var cachedValue = this.getFromCache(cacheKey);
                if (cachedValue) {
                    return cachedValue;
                }
                var result = origFn_1.apply(this, params);
                this.setCache(cacheKey, result, timeInSeconds);
                return result;
            };
        }
        return descriptor;
    };
}
//# sourceMappingURL=CachedGetter.mjs.map