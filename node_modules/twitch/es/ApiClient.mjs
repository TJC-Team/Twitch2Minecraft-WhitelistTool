import { __assign, __awaiter, __decorate, __generator, __rest } from "tslib";
import { Cacheable, CachedGetter } from '@d-fischer/cache-decorators';
import deprecate from '@d-fischer/deprecate';
import { LogLevel } from '@d-fischer/logger';
import { callTwitchApi, callTwitchApiRaw, HttpStatusCodeError, transformTwitchApiResponse, TwitchApiCallType } from 'twitch-api-call';
import { ClientCredentialsAuthProvider, exchangeCode, getAppToken, getTokenInfo, InvalidTokenError, RefreshableAuthProvider, refreshUserToken, StaticAuthProvider, TokenInfo } from 'twitch-auth';
import { BadgesApi } from "./API/Badges/BadgesApi.mjs";
import { HelixApiGroup } from "./API/Helix/HelixApiGroup.mjs";
import { HelixRateLimiter } from "./API/Helix/HelixRateLimiter.mjs";
import { KrakenApiGroup } from "./API/Kraken/KrakenApiGroup.mjs";
import { CheermoteBackground, CheermoteScale, CheermoteState } from "./API/Shared/BaseCheermoteList.mjs";
import { UnsupportedApi } from "./API/Unsupported/UnsupportedApi.mjs";
import { ConfigError } from "./Errors/ConfigError.mjs";
/**
 * The main entry point of this library. Manages API calls and the use of access tokens in these.
 */
var ApiClient = /** @class */ (function () {
    /**
     * Creates a new API client instance.
     *
     * @param config Configuration for the client instance.
     */
    function ApiClient(config) {
        var authProvider = config.authProvider, restConfig = __rest(config, ["authProvider"]);
        if (!authProvider) {
            throw new ConfigError('No auth provider given. Please supply the `authProvider` option.');
        }
        this._helixRateLimiter = new HelixRateLimiter(config.logLevel || LogLevel.CRITICAL);
        this._config = __assign({ preAuth: false, cheermotes: {
                defaultBackground: CheermoteBackground.dark,
                defaultState: CheermoteState.animated,
                defaultScale: CheermoteScale.x1
            }, authProvider: authProvider }, restConfig);
        if (this._config.preAuth) {
            // tslint:disable-next-line:no-floating-promises
            authProvider.getAccessToken(this._config.initialScopes);
        }
    }
    /**
     * Creates a new instance with fixed credentials.
     *
     * @deprecated Use the constructor of {@StaticAuthProvider} or {@RefreshableAuthProvider} and pass it as `authProvider` option to this class' constructor instead.
     *
     * @param clientId The client ID of your application.
     * @param accessToken The access token to call the API with.
     *
     * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
     * @param scopes The scopes your supplied token has.
     *
     * If this argument is given, the scopes need to be correct, or weird things might happen. If it's not (i.e. it's `undefined`), we fetch the correct scopes for you.
     *
     * If you can't exactly say which scopes your token has, don't use this parameter/set it to `undefined`.
     * @param refreshConfig Configuration to automatically refresh expired tokens.
     * @param config Additional configuration to pass to the constructor.
     * @param tokenType The type of token you passed.
     *
     * This should almost always be 'user' (which is the default).
     *
     * If you're passing 'app' here, please consider using {@ApiClient.withClientCredentials} instead.
     */
    ApiClient.withCredentials = function (clientId, accessToken, scopes, refreshConfig, config, tokenType) {
        if (config === void 0) { config = {}; }
        if (tokenType === void 0) { tokenType = 'user'; }
        var authProvider = refreshConfig
            ? new RefreshableAuthProvider(new StaticAuthProvider(clientId, accessToken, scopes, tokenType), refreshConfig)
            : new StaticAuthProvider(clientId, accessToken, scopes, tokenType);
        return new this(__assign(__assign({}, config), { authProvider: authProvider }));
    };
    /**
     * Creates a new instance with client credentials.
     *
     * @deprecated Use the constructor of {@ClientCredentialsAuthProvider} and pass it as `authProvider` option to this class' constructor instead.
     *
     * @param clientId The client ID of your application.
     * @param clientSecret The client secret of your application.
     * @param config Additional configuration to pass to the constructor.
     */
    ApiClient.withClientCredentials = function (clientId, clientSecret, config) {
        if (config === void 0) { config = {}; }
        var authProvider = clientSecret
            ? new ClientCredentialsAuthProvider(clientId, clientSecret)
            : new StaticAuthProvider(clientId);
        return new this(__assign(__assign({}, config), { authProvider: authProvider }));
    };
    /**
     * Makes a call to the Twitch API using given credentials.
     *
     * @deprecated Use `callTwitchApi` from `twitch-api-call` instead.
     *
     * @param options The configuration of the call.
     * @param clientId The client ID of your application.
     * @param accessToken The access token to call the API with.
     *
     * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ApiClient.callApi = function (options, clientId, accessToken) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, callTwitchApi(options, clientId, accessToken)];
            });
        });
    };
    /**
     * Makes a call to the Twitch API using given credentials.
     *
     * @deprecated Use `callTwitchApi` from `twitch-api-call` instead.
     *
     * @param options The configuration of the call.
     * @param clientId The client ID of your application.
     * @param accessToken The access token to call the API with.
     *
     * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention,@typescript-eslint/no-explicit-any
    ApiClient.callAPI = function (options, clientId, accessToken) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                deprecate('[twitch] ChatClient.callAPI', 'Use callApi instead.');
                return [2 /*return*/, this.callApi(options, clientId, accessToken)];
            });
        });
    };
    /**
     * Retrieves an access token with your client credentials and an authorization code.
     *
     * @deprecated Use `exchangeCode` from `twitch-auth` instead.
     *
     * @param clientId The client ID of your application.
     * @param clientSecret The client secret of your application.
     * @param code The authorization code.
     * @param redirectUri The redirect URI. This serves no real purpose here, but must still match with the redirect URI you configured in the Twitch Developer dashboard.
     */
    ApiClient.getAccessToken = function (clientId, clientSecret, code, redirectUri) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, exchangeCode(clientId, clientSecret, code, redirectUri)];
            });
        });
    };
    /**
     * Retrieves an app access token with your client credentials.
     *
     * @deprecated Use `getAppToken` from `twitch-auth` instead.
     *
     * @param clientId The client ID of your application.
     * @param clientSecret The client secret of your application.
     */
    ApiClient.getAppAccessToken = function (clientId, clientSecret) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, getAppToken(clientId, clientSecret)];
            });
        });
    };
    /**
     * Refreshes an expired access token with your client credentials and the refresh token that was given by the initial authentication.
     *
     * @deprecated Use `refreshUserToken` from `twitch-auth` instead.
     *
     * @param clientId The client ID of your application.
     * @param clientSecret The client secret of your application.
     * @param refreshToken The refresh token.
     */
    ApiClient.refreshAccessToken = function (clientId, clientSecret, refreshToken) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, refreshUserToken(clientId, clientSecret, refreshToken)];
            });
        });
    };
    /**
     * Retrieves information about an access token.
     *
     * @deprecated Use `getTokenInfo` from `twitch-auth` instead.
     *
     * @param clientId The client ID of your application.
     * @param accessToken The access token to get the information of.
     *
     * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
     */
    ApiClient.getTokenInfo = function (accessToken, clientId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, getTokenInfo(accessToken, clientId)];
            });
        });
    };
    /**
     * Retrieves information about your access token.
     */
    ApiClient.prototype.getTokenInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.callApi({ type: TwitchApiCallType.Auth, url: 'validate' })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new TokenInfo(data)];
                    case 2:
                        e_1 = _a.sent();
                        if (e_1 instanceof HttpStatusCodeError && e_1.statusCode === 401) {
                            throw new InvalidTokenError();
                        }
                        throw e_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieves an access token for the authentication provider.
     *
     * @param scopes The scopes to request.
     *
     * @deprecated Use {@AuthProvider#getAccessToken} directly instead.
     */
    ApiClient.prototype.getAccessToken = function (scopes) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._config.authProvider.getAccessToken(scopes)];
            });
        });
    };
    Object.defineProperty(ApiClient.prototype, "currentScopes", {
        /**
         * The scopes that are currently available using the access token.
         *
         * @deprecated Use {@AuthProvider#currentScopes} directly instead.
         */
        get: function () {
            return this._config.authProvider.currentScopes;
        },
        enumerable: false,
        configurable: true
    });
    /** @private */
    ApiClient.prototype.setAccessToken = function (token) {
        this._config.authProvider.setAccessToken(token);
    };
    /**
     * Forces the authentication provider to refresh the access token, if possible.
     *
     * @deprecated Use {@AuthProvider#refresh} directly instead.
     */
    ApiClient.prototype.refresh = function () {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_d) {
                return [2 /*return*/, (_c = (_b = (_a = this._config.authProvider).refresh) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : null];
            });
        });
    };
    /**
     * Forces the authentication provider to refresh the access token, if possible.
     *
     * @deprecated Use {@AuthProvider#refresh} directly instead.
     */
    ApiClient.prototype.refreshAccessToken = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.refresh()];
                    case 1: return [2 /*return*/, (_a = (_b.sent())) !== null && _a !== void 0 ? _a : undefined];
                }
            });
        });
    };
    Object.defineProperty(ApiClient.prototype, "tokenType", {
        /**
         * The type of token used by the client.
         */
        get: function () {
            return this._config.authProvider.tokenType || 'user';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApiClient.prototype, "clientId", {
        /**
         * The client ID of your application.
         */
        get: function () {
            return this._config.authProvider.clientId;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Makes a call to the Twitch API using your access token.
     *
     * @param options The configuration of the call.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ApiClient.prototype.callApi = function (options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var authProvider, shouldAuth, accessToken, _b, newAccessToken, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        authProvider = this._config.authProvider;
                        shouldAuth = (_a = options === null || options === void 0 ? void 0 : options.auth) !== null && _a !== void 0 ? _a : true;
                        if (!shouldAuth) return [3 /*break*/, 2];
                        return [4 /*yield*/, authProvider.getAccessToken(options.scope ? [options.scope] : undefined)];
                    case 1:
                        _b = _c.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _b = null;
                        _c.label = 3;
                    case 3:
                        accessToken = _b;
                        if (!accessToken) {
                            return [2 /*return*/, callTwitchApi(options, authProvider.clientId)];
                        }
                        if (!(accessToken.isExpired && authProvider.refresh)) return [3 /*break*/, 5];
                        return [4 /*yield*/, authProvider.refresh()];
                    case 4:
                        newAccessToken = _c.sent();
                        if (newAccessToken) {
                            accessToken = newAccessToken;
                        }
                        _c.label = 5;
                    case 5: return [4 /*yield*/, this._callApiInternal(options, authProvider.clientId, accessToken.accessToken)];
                    case 6:
                        response = _c.sent();
                        if (!(response.status === 401 && authProvider.refresh)) return [3 /*break*/, 10];
                        return [4 /*yield*/, authProvider.refresh()];
                    case 7:
                        _c.sent();
                        return [4 /*yield*/, authProvider.getAccessToken(options.scope ? [options.scope] : [])];
                    case 8:
                        accessToken = _c.sent();
                        if (!accessToken) return [3 /*break*/, 10];
                        return [4 /*yield*/, this._callApiInternal(options, authProvider.clientId, accessToken.accessToken)];
                    case 9:
                        response = _c.sent();
                        _c.label = 10;
                    case 10: return [2 /*return*/, transformTwitchApiResponse(response)];
                }
            });
        });
    };
    /**
     * Makes a call to the Twitch API using your access token.
     *
     * @deprecated Use callApi instead.
     *
     * @param options The configuration of the call.
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention,@typescript-eslint/no-explicit-any
    ApiClient.prototype.callAPI = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                deprecate('[twitch] ChatClient#callAPI', 'Use callApi instead.');
                return [2 /*return*/, this.callApi(options)];
            });
        });
    };
    Object.defineProperty(ApiClient.prototype, "cheermoteDefaults", {
        /**
         * The default specs for cheermotes.
         */
        get: function () {
            return this._config.cheermotes;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApiClient.prototype, "kraken", {
        /**
         * A group of Kraken API methods.
         */
        get: function () {
            return new KrakenApiGroup(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApiClient.prototype, "helix", {
        /**
         * A group of Helix API methods.
         */
        get: function () {
            return new HelixApiGroup(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApiClient.prototype, "badges", {
        /**
         * The API methods that deal with badges.
         */
        get: function () {
            return new BadgesApi(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApiClient.prototype, "unsupported", {
        /**
         * Various API methods that are not officially supported by Twitch.
         */
        get: function () {
            return new UnsupportedApi(this);
        },
        enumerable: false,
        configurable: true
    });
    ApiClient.prototype._callApiInternal = function (options, clientId, accessToken) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (options.type === TwitchApiCallType.Helix) {
                    return [2 /*return*/, this._helixRateLimiter.request({ options: options, clientId: clientId, accessToken: accessToken })];
                }
                return [2 /*return*/, callTwitchApiRaw(options, clientId, accessToken)];
            });
        });
    };
    __decorate([
        CachedGetter()
    ], ApiClient.prototype, "kraken", null);
    __decorate([
        CachedGetter()
    ], ApiClient.prototype, "helix", null);
    __decorate([
        CachedGetter()
    ], ApiClient.prototype, "badges", null);
    __decorate([
        CachedGetter()
    ], ApiClient.prototype, "unsupported", null);
    ApiClient = __decorate([
        Cacheable
    ], ApiClient);
    return ApiClient;
}());
export { ApiClient };
