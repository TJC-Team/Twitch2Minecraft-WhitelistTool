import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { Cacheable, Cached } from '@d-fischer/cache-decorators';
import { TwitchApiCallType } from 'twitch-api-call';
import { extractUserId } from "../../Toolkit/UserTools.mjs";
import { BaseApi } from "../BaseApi.mjs";
import { ChatBadgeList } from "./ChatBadgeList.mjs";
/**
 * The API methods that deal with badges.
 *
 * Can be accessed using `client.badges` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const cheermotes = await api.badges.getGlobalBadges();
 * ```
 */
var BadgesApi = /** @class */ (function (_super) {
    __extends(BadgesApi, _super);
    function BadgesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves all globally applicable chat badges.
     *
     * @param language The language of the retrieved badge descriptions.
     */
    BadgesApi.prototype.getGlobalBadges = function (language) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.callApi({
                            url: 'https://badges.twitch.tv/v1/badges/global/display',
                            query: {
                                language: language
                            },
                            type: TwitchApiCallType.Custom
                        })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new ChatBadgeList(data.badge_sets, this._client)];
                }
            });
        });
    };
    /**
     * Retrieves all applicable chat badges for a given channel.
     *
     * @param channel The channel to retrieve the chat badges for.
     * @param includeGlobal Whether to include global badges in the result list.
     * @param language The language of the retrieved badge descriptions.
     */
    BadgesApi.prototype.getChannelBadges = function (channel, includeGlobal, language) {
        if (includeGlobal === void 0) { includeGlobal = true; }
        return __awaiter(this, void 0, void 0, function () {
            var data, channelBadges;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.callApi({
                            url: "https://badges.twitch.tv/v1/badges/channels/" + extractUserId(channel) + "/display",
                            query: {
                                language: language
                            },
                            type: TwitchApiCallType.Custom
                        })];
                    case 1:
                        data = _a.sent();
                        channelBadges = new ChatBadgeList(data.badge_sets, this._client);
                        if (!includeGlobal) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getGlobalBadges(language)];
                    case 2: return [2 /*return*/, (_a.sent())._merge(channelBadges)];
                    case 3: return [2 /*return*/, channelBadges];
                }
            });
        });
    };
    __decorate([
        Cached(3600)
    ], BadgesApi.prototype, "getGlobalBadges", null);
    __decorate([
        Cached(3600)
    ], BadgesApi.prototype, "getChannelBadges", null);
    BadgesApi = __decorate([
        Cacheable
    ], BadgesApi);
    return BadgesApi;
}(BaseApi));
export { BadgesApi };
