import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { Cacheable, Cached } from '@d-fischer/cache-decorators';
import { extractUserId } from "../../../Toolkit/UserTools.mjs";
import { BaseApi } from "../../BaseApi.mjs";
import { Stream, StreamType } from "./Stream.mjs";
/**
 * The API methods that deal with streams.
 *
 * Can be accessed using `client.kraken.streams` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const stream = await api.kraken.streams.getStreamByChannel('125328655');
 * ```
 */
var StreamApi = /** @class */ (function (_super) {
    __extends(StreamApi, _super);
    function StreamApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves the current stream on the given channel.
     *
     * @param channel
     */
    StreamApi.prototype.getStreamByChannel = function (channel) {
        return __awaiter(this, void 0, void 0, function () {
            var channelId, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        channelId = extractUserId(channel);
                        return [4 /*yield*/, this._client.callApi({ url: "streams/" + channelId })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.stream ? new Stream(data.stream, this._client) : null];
                }
            });
        });
    };
    /**
     * Retrieves a list of streams.
     *
     * @param channels A channel ID or a list thereof.
     * @param game Show only streams playing a certain game.
     * @param languageCode Show only streams in a certain language.
     * @param type Show only streams of a certain type.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    StreamApi.prototype.getStreams = function (channels, game, languageCode, type, page, limit) {
        if (limit === void 0) { limit = 25; }
        return __awaiter(this, void 0, void 0, function () {
            var query, data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = {
                            limit: limit.toString(),
                            channel: channels ? (typeof channels === 'string' ? channels : channels.join(',')) : undefined,
                            game: game,
                            language: languageCode,
                            stream_type: type,
                            offset: page ? ((page - 1) * limit).toString() : undefined
                        };
                        return [4 /*yield*/, this._client.callApi({ url: 'streams', query: query })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.streams.map(function (streamData) { return new Stream(streamData, _this._client); })];
                }
            });
        });
    };
    /**
     * Retrieves a list of all streams.
     *
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    StreamApi.prototype.getAllStreams = function (page, limit) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getStreams(undefined, undefined, undefined, StreamType.All, page, limit)];
            });
        });
    };
    /**
     * Retrieves a list of all live streams.
     *
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    StreamApi.prototype.getAllLiveStreams = function (page, limit) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getStreams(undefined, undefined, undefined, StreamType.Live, page, limit)];
            });
        });
    };
    /**
     * Retrieves a list of all streams on channels the currently authenticated user is following.
     *
     * @param type Show only streams of a certain type.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    StreamApi.prototype.getFollowedStreams = function (type, page, limit) {
        if (limit === void 0) { limit = 25; }
        return __awaiter(this, void 0, void 0, function () {
            var query, data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = { limit: limit.toString() };
                        if (type) {
                            query.type = type;
                        }
                        if (page) {
                            query.offset = ((page - 1) * limit).toString();
                        }
                        return [4 /*yield*/, this._client.callApi({
                                url: 'streams/followed',
                                query: query,
                                scope: 'user_read'
                            })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.streams.map(function (streamData) { return new Stream(streamData, _this._client); })];
                }
            });
        });
    };
    __decorate([
        Cached(60)
    ], StreamApi.prototype, "getStreamByChannel", null);
    __decorate([
        Cached(60)
    ], StreamApi.prototype, "getFollowedStreams", null);
    StreamApi = __decorate([
        Cacheable
    ], StreamApi);
    return StreamApi;
}(BaseApi));
export { StreamApi };
