import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { Cacheable, Cached } from '@d-fischer/cache-decorators';
import { BaseApi } from "../../BaseApi.mjs";
import { Channel } from "../Channel/Channel.mjs";
import { Stream } from "../Stream/Stream.mjs";
/**
 * The API methods that deal with searching.
 *
 * Can be accessed using `client.kraken.search` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const channel = await api.kraken.search.searchStreams('Hearthstone');
 * ```
 */
var SearchApi = /** @class */ (function (_super) {
    __extends(SearchApi, _super);
    function SearchApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves a list of channels that match the given search term.
     *
     * @param term The term you want to search for.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    SearchApi.prototype.searchChannels = function (term, page, limit) {
        if (limit === void 0) { limit = 25; }
        return __awaiter(this, void 0, void 0, function () {
            var query, data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = { query: term, limit: limit.toString() };
                        if (page) {
                            query.offset = ((page - 1) * limit).toString();
                        }
                        return [4 /*yield*/, this._client.callApi({ url: 'search/channels', query: query })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.channels.map(function (channelData) { return new Channel(channelData, _this._client); })];
                }
            });
        });
    };
    /**
     * Retrieves a list of streams that match the given search term.
     *
     * @param term The term you want to search for.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     * @param hls Whether you want only HLS or only non-HLS (RTMP) streams. If not set, finds both types of streams.
     */
    SearchApi.prototype.searchStreams = function (term, page, limit, hls) {
        if (limit === void 0) { limit = 25; }
        return __awaiter(this, void 0, void 0, function () {
            var query, data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = { query: term, limit: limit.toString() };
                        if (page) {
                            query.offset = ((page - 1) * limit).toString();
                        }
                        if (hls !== undefined) {
                            query.hls = hls.toString();
                        }
                        return [4 /*yield*/, this._client.callApi({ url: 'search/streams', query: query })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.streams.map(function (streamData) { return new Stream(streamData, _this._client); })];
                }
            });
        });
    };
    __decorate([
        Cached(300)
    ], SearchApi.prototype, "searchChannels", null);
    __decorate([
        Cached(300)
    ], SearchApi.prototype, "searchStreams", null);
    SearchApi = __decorate([
        Cacheable
    ], SearchApi);
    return SearchApi;
}(BaseApi));
export { SearchApi };
