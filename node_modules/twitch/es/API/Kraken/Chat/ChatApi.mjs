import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { Cacheable, Cached } from '@d-fischer/cache-decorators';
import { extractUserId } from "../../../Toolkit/UserTools.mjs";
import { BaseApi } from "../../BaseApi.mjs";
import { ChatEmoteList } from "./ChatEmoteList.mjs";
import { ChatRoom } from "./ChatRoom.mjs";
/**
 * The API methods that deal with chat and chatrooms.
 *
 * Can be accessed using `client.kraken.chat` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const emotes = await api.kraken.chat.getEmotesBySets('1');
 * ```
 */
var ChatApi = /** @class */ (function (_super) {
    __extends(ChatApi, _super);
    function ChatApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves a list of emotes for a given list of enote set IDs.
     *
     * @param emotesets The list of emote set IDs, either as array of strings or as a comma separated string.
     */
    ChatApi.prototype.getEmotesBySets = function (emotesets) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof emotesets !== 'string') {
                            emotesets = emotesets.join(',');
                        }
                        return [4 /*yield*/, this._client.callApi({
                                url: 'chat/emoticon_images',
                                query: {
                                    emotesets: emotesets
                                }
                            })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new ChatEmoteList(data.emoticons, this._client)];
                }
            });
        });
    };
    /**
     * Retrieves a list of chat rooms for a given channel.
     *
     * @param channel The channel to retrieve the chat rooms of.
     */
    ChatApi.prototype.getChatRoomsForChannel = function (channel) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.callApi({
                            url: "chat/" + extractUserId(channel) + "/rooms"
                        })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.rooms.map(function (room) { return new ChatRoom(room, _this._client); })];
                }
            });
        });
    };
    __decorate([
        Cached(3600)
    ], ChatApi.prototype, "getEmotesBySets", null);
    __decorate([
        Cached(3600)
    ], ChatApi.prototype, "getChatRoomsForChannel", null);
    ChatApi = __decorate([
        Cacheable
    ], ChatApi);
    return ChatApi;
}(BaseApi));
export { ChatApi };
