import { __decorate } from "tslib";
import { Enumerable } from '@d-fischer/shared-utils';
/**
 * A Twitch video.
 */
var Video = /** @class */ (function () {
    /** @private */
    function Video(/** @private */ _data, client) {
        this._data = _data;
        this._client = client;
    }
    Object.defineProperty(Video.prototype, "id", {
        /**
         * The ID of the video.
         */
        get: function () {
            return this._data._id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Video.prototype, "channelId", {
        /**
         * The ID of the channel the video was uploaded to.
         */
        get: function () {
            return this._data.channel._id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Video.prototype, "channelName", {
        /**
         * The name of the channel the video was uploaded to.
         */
        get: function () {
            return this._data.channel.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Video.prototype, "channelDisplayName", {
        /**
         * The display name of the channel the video was uploaded to.
         */
        get: function () {
            return this._data.channel.display_name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Video.prototype, "creationDate", {
        /**
         * The date when the video was created.
         */
        get: function () {
            return new Date(this._data.created_at);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Video.prototype, "description", {
        /**
         * The description of the video.
         */
        get: function () {
            return this._data.description;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Video.prototype, "htmlDescription", {
        /**
         * The description of the video in HTML.
         */
        get: function () {
            return this._data.description_html;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Video.prototype, "resolutions", {
        /**
         * The resolutions the video is available in.
         */
        get: function () {
            return this._data.resolutions;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets the FPS (frames per second) of the video for a given resolution.
     *
     * @param resolution The resolution to get FPS for. This is the *key* of the resolutions object.
     */
    Video.prototype.getFps = function (resolution) {
        return this._data.fps[resolution];
    };
    Object.defineProperty(Video.prototype, "gameName", {
        /**
         * The name of the game shown in the video.
         */
        get: function () {
            return this._data.game;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Video.prototype, "language", {
        /**
         * The language of the video.
         */
        get: function () {
            return this._data.language;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Video.prototype, "length", {
        /**
         * The length of the video, in seconds.
         */
        get: function () {
            return this._data.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Video.prototype, "mutedSegments", {
        /**
         * The muted segments of the video.
         */
        get: function () {
            return this._data.muted_segments;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets the URL for a given size of the video.
     *
     * @param size The size of the preview.
     */
    Video.prototype.getPreview = function (size) {
        return this._data.preview[size];
    };
    Object.defineProperty(Video.prototype, "publishDate", {
        /**
         * The date when the video was published.
         */
        get: function () {
            return new Date(this._data.published_at);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Video.prototype, "status", {
        /**
         * The status of the video.
         */
        get: function () {
            return this._data.status;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Video.prototype, "tags", {
        /**
         * A list of tags of the video.
         */
        get: function () {
            return this._data.tag_list.split(',');
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets a list of thumbnails for a given size of the video.
     *
     * @param size
     */
    Video.prototype.getThumbnails = function (size) {
        return this._data.thumbnails[size];
    };
    Object.defineProperty(Video.prototype, "title", {
        /**
         * The title of the video.
         */
        get: function () {
            return this._data.title;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Video.prototype, "url", {
        /**
         * The URL of the video.
         */
        get: function () {
            return this._data.url;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Video.prototype, "isPublic", {
        /**
         * Whether the video is public.
         */
        get: function () {
            return this._data.viewable === 'public';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Video.prototype, "viewabilityDate", {
        /**
         * When the video will be viewable publicly.
         */
        get: function () {
            return this._data.viewable_at ? new Date(this._data.viewable_at) : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Video.prototype, "views", {
        /**
         * The number of views of the video.
         */
        get: function () {
            return this._data.views;
        },
        enumerable: false,
        configurable: true
    });
    __decorate([
        Enumerable(false)
    ], Video.prototype, "_client", void 0);
    return Video;
}());
export { Video };
