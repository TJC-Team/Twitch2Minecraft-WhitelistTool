import { __decorate, __extends } from "tslib";
import { Enumerable, indexBy } from '@d-fischer/shared-utils';
import { HellFreezesOverError } from "../../../Errors/HellFreezesOverError.mjs";
import { BaseCheermoteList } from "../../Shared/BaseCheermoteList.mjs";
/**
 * A list of cheermotes you can use globally or in a specific channel, depending on how you fetched the list.
 *
 * @inheritDoc
 */
var CheermoteList = /** @class */ (function (_super) {
    __extends(CheermoteList, _super);
    /** @private */
    function CheermoteList(data, client) {
        var _this = _super.call(this) || this;
        _this._client = client;
        _this._data = indexBy(data, function (action) { return action.prefix.toLowerCase(); });
        return _this;
    }
    /**
     * Gets the URL and color needed to properly represent a cheer of the given amount of bits with the given prefix.
     *
     * @param name The name/prefix of the cheermote.
     * @param bits The amount of bits cheered.
     * @param format The format of the cheermote you want to request.
     */
    CheermoteList.prototype.getCheermoteDisplayInfo = function (name, bits, format) {
        var _a, _b, _c;
        if (format === void 0) { format = {}; }
        name = name.toLowerCase();
        var cheermoteDefaults = this._client.cheermoteDefaults;
        var background = (_a = format.background) !== null && _a !== void 0 ? _a : cheermoteDefaults.defaultBackground;
        var state = (_b = format.state) !== null && _b !== void 0 ? _b : cheermoteDefaults.defaultState;
        var scale = (_c = format.scale) !== null && _c !== void 0 ? _c : cheermoteDefaults.defaultScale;
        var tiers = this._data[name].tiers;
        var correctTier = tiers.sort(function (a, b) { return b.min_bits - a.min_bits; }).find(function (tier) { return tier.min_bits <= bits; });
        if (!correctTier) {
            throw new HellFreezesOverError("Cheermote \"" + name + "\" does not have an applicable tier for " + bits + " bits");
        }
        return {
            url: correctTier.images[background][state][scale],
            color: correctTier.color
        };
    };
    /**
     * Gets all possible cheermote names.
     */
    CheermoteList.prototype.getPossibleNames = function () {
        return Object.keys(this._data);
    };
    __decorate([
        Enumerable(false)
    ], CheermoteList.prototype, "_client", void 0);
    return CheermoteList;
}(BaseCheermoteList));
export { CheermoteList };
