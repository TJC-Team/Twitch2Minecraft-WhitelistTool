import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { Cacheable, Cached } from '@d-fischer/cache-decorators';
import { extractUserId } from "../../../Toolkit/UserTools.mjs";
import { BaseApi } from "../../BaseApi.mjs";
import { CheermoteList } from "./CheermoteList.mjs";
/**
 * The API methods that deal with Bits/Cheermotes.
 *
 * Can be accessed using `client.kraken.bits` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const cheermotes = await api.kraken.bits.getCheermotes();
 * ```
 */
var BitsApi = /** @class */ (function (_super) {
    __extends(BitsApi, _super);
    function BitsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves global and channel cheermotes.
     *
     * @param channel The channel you want to retrieve the available cheermotes for.
     * If not given, this method retrieves a list of globally available cheermotes.
     * @param includeSponsored Whether to include sponsored cheermotes in the list.
     */
    BitsApi.prototype.getCheermotes = function (channel, includeSponsored) {
        if (includeSponsored === void 0) { includeSponsored = true; }
        return __awaiter(this, void 0, void 0, function () {
            var query, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = {};
                        if (channel) {
                            query.channel_id = extractUserId(channel);
                        }
                        if (includeSponsored) {
                            query.include_sponsored = 'true';
                        }
                        return [4 /*yield*/, this._client.callApi({ url: 'bits/actions', query: query })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new CheermoteList(data.actions, this._client)];
                }
            });
        });
    };
    __decorate([
        Cached(3600)
    ], BitsApi.prototype, "getCheermotes", null);
    BitsApi = __decorate([
        Cacheable
    ], BitsApi);
    return BitsApi;
}(BaseApi));
export { BitsApi };
