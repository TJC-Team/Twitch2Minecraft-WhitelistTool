import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { Cacheable, Cached } from '@d-fischer/cache-decorators';
import { TwitchApiCallType } from 'twitch-api-call';
import { extractUserName } from "../../Toolkit/UserTools.mjs";
import { BaseApi } from "../BaseApi.mjs";
import { ChattersList } from "./ChattersList.mjs";
/**
 * Different API methods that are not officially supported by Twitch.
 *
 * Can be accessed using `client.unsupported` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const events = await api.unsupported.getChatters('yourfavoritestreamer');
 * ```
 */
var UnsupportedApi = /** @class */ (function (_super) {
    __extends(UnsupportedApi, _super);
    function UnsupportedApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves a list of chatters in the Twitch chat of the given channel.
     *
     * **WARNING:** In contrast to most other methods, this takes a channel *name*, not a user ID.
     *
     * @param channel The channel to retrieve the chatters for.
     */
    UnsupportedApi.prototype.getChatters = function (channel) {
        return __awaiter(this, void 0, void 0, function () {
            var channelName, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        channelName = extractUserName(channel);
                        return [4 /*yield*/, this._client.callApi({
                                url: "https://tmi.twitch.tv/group/user/" + channelName + "/chatters",
                                type: TwitchApiCallType.Custom
                            })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new ChattersList(data)];
                }
            });
        });
    };
    __decorate([
        Cached(60)
    ], UnsupportedApi.prototype, "getChatters", null);
    UnsupportedApi = __decorate([
        Cacheable
    ], UnsupportedApi);
    return UnsupportedApi;
}(BaseApi));
export { UnsupportedApi };
