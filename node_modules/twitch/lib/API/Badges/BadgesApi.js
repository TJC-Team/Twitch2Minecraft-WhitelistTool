"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BadgesApi = void 0;
var tslib_1 = require("tslib");
var cache_decorators_1 = require("@d-fischer/cache-decorators");
var twitch_api_call_1 = require("twitch-api-call");
var UserTools_1 = require("../../Toolkit/UserTools");
var BaseApi_1 = require("../BaseApi");
var ChatBadgeList_1 = require("./ChatBadgeList");
/**
 * The API methods that deal with badges.
 *
 * Can be accessed using `client.badges` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const cheermotes = await api.badges.getGlobalBadges();
 * ```
 */
var BadgesApi = /** @class */ (function (_super) {
    tslib_1.__extends(BadgesApi, _super);
    function BadgesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves all globally applicable chat badges.
     *
     * @param language The language of the retrieved badge descriptions.
     */
    BadgesApi.prototype.getGlobalBadges = function (language) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.callApi({
                            url: 'https://badges.twitch.tv/v1/badges/global/display',
                            query: {
                                language: language
                            },
                            type: twitch_api_call_1.TwitchApiCallType.Custom
                        })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new ChatBadgeList_1.ChatBadgeList(data.badge_sets, this._client)];
                }
            });
        });
    };
    /**
     * Retrieves all applicable chat badges for a given channel.
     *
     * @param channel The channel to retrieve the chat badges for.
     * @param includeGlobal Whether to include global badges in the result list.
     * @param language The language of the retrieved badge descriptions.
     */
    BadgesApi.prototype.getChannelBadges = function (channel, includeGlobal, language) {
        if (includeGlobal === void 0) { includeGlobal = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data, channelBadges;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.callApi({
                            url: "https://badges.twitch.tv/v1/badges/channels/" + UserTools_1.extractUserId(channel) + "/display",
                            query: {
                                language: language
                            },
                            type: twitch_api_call_1.TwitchApiCallType.Custom
                        })];
                    case 1:
                        data = _a.sent();
                        channelBadges = new ChatBadgeList_1.ChatBadgeList(data.badge_sets, this._client);
                        if (!includeGlobal) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getGlobalBadges(language)];
                    case 2: return [2 /*return*/, (_a.sent())._merge(channelBadges)];
                    case 3: return [2 /*return*/, channelBadges];
                }
            });
        });
    };
    tslib_1.__decorate([
        cache_decorators_1.Cached(3600)
    ], BadgesApi.prototype, "getGlobalBadges", null);
    tslib_1.__decorate([
        cache_decorators_1.Cached(3600)
    ], BadgesApi.prototype, "getChannelBadges", null);
    BadgesApi = tslib_1.__decorate([
        cache_decorators_1.Cacheable
    ], BadgesApi);
    return BadgesApi;
}(BaseApi_1.BaseApi));
exports.BadgesApi = BadgesApi;
