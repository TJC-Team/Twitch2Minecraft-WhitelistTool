"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnsupportedApi = void 0;
var tslib_1 = require("tslib");
var cache_decorators_1 = require("@d-fischer/cache-decorators");
var twitch_api_call_1 = require("twitch-api-call");
var UserTools_1 = require("../../Toolkit/UserTools");
var BaseApi_1 = require("../BaseApi");
var ChattersList_1 = require("./ChattersList");
/**
 * Different API methods that are not officially supported by Twitch.
 *
 * Can be accessed using `client.unsupported` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const events = await api.unsupported.getChatters('yourfavoritestreamer');
 * ```
 */
var UnsupportedApi = /** @class */ (function (_super) {
    tslib_1.__extends(UnsupportedApi, _super);
    function UnsupportedApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves a list of chatters in the Twitch chat of the given channel.
     *
     * **WARNING:** In contrast to most other methods, this takes a channel *name*, not a user ID.
     *
     * @param channel The channel to retrieve the chatters for.
     */
    UnsupportedApi.prototype.getChatters = function (channel) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var channelName, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        channelName = UserTools_1.extractUserName(channel);
                        return [4 /*yield*/, this._client.callApi({
                                url: "https://tmi.twitch.tv/group/user/" + channelName + "/chatters",
                                type: twitch_api_call_1.TwitchApiCallType.Custom
                            })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new ChattersList_1.ChattersList(data)];
                }
            });
        });
    };
    tslib_1.__decorate([
        cache_decorators_1.Cached(60)
    ], UnsupportedApi.prototype, "getChatters", null);
    UnsupportedApi = tslib_1.__decorate([
        cache_decorators_1.Cacheable
    ], UnsupportedApi);
    return UnsupportedApi;
}(BaseApi_1.BaseApi));
exports.UnsupportedApi = UnsupportedApi;
