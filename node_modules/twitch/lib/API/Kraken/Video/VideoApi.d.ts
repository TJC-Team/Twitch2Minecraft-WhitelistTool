import type { UserIdResolvable } from '../../../Toolkit/UserTools';
import { BaseApi } from '../../BaseApi';
import { CreatedVideo } from './CreatedVideo';
import type { VideoViewability } from './Video';
import { Video } from './Video';
/**
 * Possible periods to search videos in.
 */
export declare type VideoSearchPeriod = 'week' | 'month' | 'all';
/**
 * Possible video types to search for.
 */
export declare type VideoType = 'archive' | 'highlight' | 'upload';
/**
 * Possible ways to sort videos.
 */
export declare type VideoSort = 'time' | 'views';
/** @private */
export interface VideoEditData {
    /**
     * The new description of the video.
     */
    description?: string;
    /**
     * The new game of the video.
     */
    game?: string;
    /**
     * The new language of the video.
     */
    language?: string;
    /**
     * The new tag list of the video.
     */
    tag_list?: string;
}
/**
 * Video data for a new video using {@VideoApi#createVideo}.
 */
interface VideoCreateData extends VideoEditData {
    /**
     * The new title of the video.
     */
    title: string;
    /**
     * Whether the video will be public or private initially.
     */
    viewable: VideoViewability;
    /**
     * When the video will become public.
     *
     * This only takes effect if `viewable` is `private`.
     */
    viewable_at: string;
}
/**
 * Video data to update using {@VideoApi#updateVideo}.
 *
 * @inheritDoc
 */
export interface VideoUpdateData extends VideoEditData {
    /**
     * The new title of the video.
     */
    title?: string;
}
/**
 * The API methods that deal with users.
 *
 * Can be accessed using `client.kraken.videos` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const user = await api.kraken.videos.getVideo('85448040');
 * ```
 */
export declare class VideoApi extends BaseApi {
    /**
     * Retrieves a video by ID.
     *
     * @param id The ID of the video.
     */
    getVideo(id: string): Promise<Video>;
    /**
     * Retrieves the top videos.
     *
     * @param game Show only videos of a certain game.
     * @param searchPeriod Show only videos from a certain time period.
     * @param type Show only videos of a certain type.
     * @param languageCode Show only videos in a certain language.
     * @param sort Sort the videos by specified criteria.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    getTopVideos(game?: string, searchPeriod?: VideoSearchPeriod, type?: VideoType, languageCode?: string, sort?: VideoSort, page?: number, limit?: number): Promise<Video[]>;
    /**
     * Retrieves the videos from channels followed by the authenticated user.
     *
     * @param type Show only videos of a certain type.
     * @param languageCode Show only videos in a certain language.
     * @param sort Sort the videos by specified criteria.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    getFollowedVideos(type?: VideoType, languageCode?: string, sort?: VideoSort, page?: number, limit?: number): Promise<Video[]>;
    /**
     * Creates a new video.
     *
     * @param channel The channel to upload the video to.
     * @param createData The data for the video.
     */
    createVideo(channel: UserIdResolvable, createData: VideoCreateData): Promise<CreatedVideo>;
    /**
     * Completes a video upload.
     *
     * @param id The ID of the video.
     * @param token The upload token.
     */
    completeVideoUpload(id: string, token: string): Promise<void>;
    /**
     * Updates an already uploaded video.
     *
     * @param id The ID of the video.
     * @param updateData The data to change for the video.
     */
    updateVideo(id: string, updateData: VideoUpdateData): Promise<void>;
    /**
     * Deletes a video.
     *
     * @param id The ID of the video.
     */
    deleteVideo(id: string): Promise<void>;
}
export {};
