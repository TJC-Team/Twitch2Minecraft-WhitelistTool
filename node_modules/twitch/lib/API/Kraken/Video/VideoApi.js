"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoApi = void 0;
var tslib_1 = require("tslib");
var twitch_api_call_1 = require("twitch-api-call");
var UserTools_1 = require("../../../Toolkit/UserTools");
var BaseApi_1 = require("../../BaseApi");
var CreatedVideo_1 = require("./CreatedVideo");
var Video_1 = require("./Video");
/**
 * The API methods that deal with users.
 *
 * Can be accessed using `client.kraken.videos` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const user = await api.kraken.videos.getVideo('85448040');
 * ```
 */
var VideoApi = /** @class */ (function (_super) {
    tslib_1.__extends(VideoApi, _super);
    function VideoApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves a video by ID.
     *
     * @param id The ID of the video.
     */
    VideoApi.prototype.getVideo = function (id) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.callApi({ url: "videos/" + id })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new Video_1.Video(data, this._client)];
                }
            });
        });
    };
    /**
     * Retrieves the top videos.
     *
     * @param game Show only videos of a certain game.
     * @param searchPeriod Show only videos from a certain time period.
     * @param type Show only videos of a certain type.
     * @param languageCode Show only videos in a certain language.
     * @param sort Sort the videos by specified criteria.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    VideoApi.prototype.getTopVideos = function (game, searchPeriod, type, languageCode, sort, page, limit) {
        if (limit === void 0) { limit = 10; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var query, data;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = {
                            limit: limit.toString(),
                            game: game,
                            period: searchPeriod,
                            broadcast_type: type,
                            language: languageCode,
                            sort: sort,
                            offset: page ? ((page - 1) * limit).toString() : undefined
                        };
                        return [4 /*yield*/, this._client.callApi({ url: 'videos/top', query: query })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.vods.map(function (vod) { return new Video_1.Video(vod, _this._client); })];
                }
            });
        });
    };
    /**
     * Retrieves the videos from channels followed by the authenticated user.
     *
     * @param type Show only videos of a certain type.
     * @param languageCode Show only videos in a certain language.
     * @param sort Sort the videos by specified criteria.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    VideoApi.prototype.getFollowedVideos = function (type, languageCode, sort, page, limit) {
        if (limit === void 0) { limit = 10; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var query, data;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = {
                            limit: limit.toString(),
                            broadcast_type: type,
                            language: languageCode,
                            sort: sort,
                            offset: page ? ((page - 1) * limit).toString() : undefined
                        };
                        return [4 /*yield*/, this._client.callApi({ url: 'videos/followed', query: query })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.vods.map(function (vod) { return new Video_1.Video(vod, _this._client); })];
                }
            });
        });
    };
    /**
     * Creates a new video.
     *
     * @param channel The channel to upload the video to.
     * @param createData The data for the video.
     */
    VideoApi.prototype.createVideo = function (channel, createData) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var channelId, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        channelId = UserTools_1.extractUserId(channel);
                        return [4 /*yield*/, this._client.callApi({
                                url: 'videos',
                                method: 'POST',
                                scope: 'channel_editor',
                                query: tslib_1.__assign({ channel_id: channelId }, createData)
                            })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new CreatedVideo_1.CreatedVideo(data, this._client)];
                }
            });
        });
    };
    /**
     * Completes a video upload.
     *
     * @param id The ID of the video.
     * @param token The upload token.
     */
    VideoApi.prototype.completeVideoUpload = function (id, token) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.callApi({
                            url: "https://uploads.twitch.tv/upload/" + id + "/complete",
                            type: twitch_api_call_1.TwitchApiCallType.Custom,
                            method: 'POST',
                            auth: false,
                            query: {
                                upload_token: token
                            }
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Updates an already uploaded video.
     *
     * @param id The ID of the video.
     * @param updateData The data to change for the video.
     */
    VideoApi.prototype.updateVideo = function (id, updateData) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.callApi({
                            url: "videos/" + id,
                            method: 'PUT',
                            scope: 'channel_editor',
                            jsonBody: updateData
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Deletes a video.
     *
     * @param id The ID of the video.
     */
    VideoApi.prototype.deleteVideo = function (id) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.callApi({
                            url: "videos/" + id,
                            method: 'DELETE',
                            scope: 'channel_editor'
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return VideoApi;
}(BaseApi_1.BaseApi));
exports.VideoApi = VideoApi;
