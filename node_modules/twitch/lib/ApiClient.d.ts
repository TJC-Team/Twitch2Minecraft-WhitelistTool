import { LogLevel } from '@d-fischer/logger';
import type { TwitchApiCallOptions } from 'twitch-api-call';
import type { AccessToken, AuthProvider, AuthProviderTokenType, RefreshConfig } from 'twitch-auth';
import { TokenInfo } from 'twitch-auth';
import { BadgesApi } from './API/Badges/BadgesApi';
import { HelixApiGroup } from './API/Helix/HelixApiGroup';
import { KrakenApiGroup } from './API/Kraken/KrakenApiGroup';
import { CheermoteBackground, CheermoteScale, CheermoteState } from './API/Shared/BaseCheermoteList';
import { UnsupportedApi } from './API/Unsupported/UnsupportedApi';
/**
 * Default configuration for the cheermote API.
 */
export interface TwitchCheermoteConfig {
    /**
     * The default background type.
     */
    defaultBackground: CheermoteBackground;
    /**
     * The default cheermote state.
     */
    defaultState: CheermoteState;
    /**
     * The default cheermote scale.
     */
    defaultScale: CheermoteScale;
}
/**
 * Configuration for an {@ApiClient} instance.
 */
export interface ApiConfig {
    /**
     * An authentication provider that supplies tokens to the client.
     *
     * For more information, see the {@AuthProvider} documentation.
     */
    authProvider: AuthProvider;
    /**
     * Whether to authenticate the client before a request is made.
     */
    preAuth: boolean;
    /**
     * The scopes to request with the initial request, even if it's not necessary for the request.
     */
    initialScopes?: string[];
    /**
     * Default values for fetched cheermotes.
     */
    cheermotes: TwitchCheermoteConfig;
    /**
     * The minimum level of log levels to see. Defaults to critical errors.
     */
    logLevel?: LogLevel;
}
/**
 * @private
 */
export interface TwitchApiCallOptionsInternal {
    options: TwitchApiCallOptions;
    clientId?: string;
    accessToken?: string;
}
/**
 * The main entry point of this library. Manages API calls and the use of access tokens in these.
 */
export declare class ApiClient implements AuthProvider {
    private readonly _config;
    private readonly _helixRateLimiter;
    /**
     * Creates a new instance with fixed credentials.
     *
     * @deprecated Use the constructor of {@StaticAuthProvider} or {@RefreshableAuthProvider} and pass it as `authProvider` option to this class' constructor instead.
     *
     * @param clientId The client ID of your application.
     * @param accessToken The access token to call the API with.
     *
     * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
     * @param scopes The scopes your supplied token has.
     *
     * If this argument is given, the scopes need to be correct, or weird things might happen. If it's not (i.e. it's `undefined`), we fetch the correct scopes for you.
     *
     * If you can't exactly say which scopes your token has, don't use this parameter/set it to `undefined`.
     * @param refreshConfig Configuration to automatically refresh expired tokens.
     * @param config Additional configuration to pass to the constructor.
     * @param tokenType The type of token you passed.
     *
     * This should almost always be 'user' (which is the default).
     *
     * If you're passing 'app' here, please consider using {@ApiClient.withClientCredentials} instead.
     */
    static withCredentials(clientId: string, accessToken?: string, scopes?: string[], refreshConfig?: RefreshConfig, config?: Partial<ApiConfig>, tokenType?: AuthProviderTokenType): ApiClient;
    /**
     * Creates a new instance with client credentials.
     *
     * @deprecated Use the constructor of {@ClientCredentialsAuthProvider} and pass it as `authProvider` option to this class' constructor instead.
     *
     * @param clientId The client ID of your application.
     * @param clientSecret The client secret of your application.
     * @param config Additional configuration to pass to the constructor.
     */
    static withClientCredentials(clientId: string, clientSecret?: string, config?: Partial<ApiConfig>): ApiClient;
    /**
     * Makes a call to the Twitch API using given credentials.
     *
     * @deprecated Use `callTwitchApi` from `twitch-api-call` instead.
     *
     * @param options The configuration of the call.
     * @param clientId The client ID of your application.
     * @param accessToken The access token to call the API with.
     *
     * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
     */
    static callApi<T = any>(options: TwitchApiCallOptions, clientId?: string, accessToken?: string): Promise<T>;
    /**
     * Makes a call to the Twitch API using given credentials.
     *
     * @deprecated Use `callTwitchApi` from `twitch-api-call` instead.
     *
     * @param options The configuration of the call.
     * @param clientId The client ID of your application.
     * @param accessToken The access token to call the API with.
     *
     * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
     */
    static callAPI<T = any>(options: TwitchApiCallOptions, clientId?: string, accessToken?: string): Promise<T>;
    /**
     * Retrieves an access token with your client credentials and an authorization code.
     *
     * @deprecated Use `exchangeCode` from `twitch-auth` instead.
     *
     * @param clientId The client ID of your application.
     * @param clientSecret The client secret of your application.
     * @param code The authorization code.
     * @param redirectUri The redirect URI. This serves no real purpose here, but must still match with the redirect URI you configured in the Twitch Developer dashboard.
     */
    static getAccessToken(clientId: string, clientSecret: string, code: string, redirectUri: string): Promise<AccessToken>;
    /**
     * Retrieves an app access token with your client credentials.
     *
     * @deprecated Use `getAppToken` from `twitch-auth` instead.
     *
     * @param clientId The client ID of your application.
     * @param clientSecret The client secret of your application.
     */
    static getAppAccessToken(clientId: string, clientSecret: string): Promise<AccessToken>;
    /**
     * Refreshes an expired access token with your client credentials and the refresh token that was given by the initial authentication.
     *
     * @deprecated Use `refreshUserToken` from `twitch-auth` instead.
     *
     * @param clientId The client ID of your application.
     * @param clientSecret The client secret of your application.
     * @param refreshToken The refresh token.
     */
    static refreshAccessToken(clientId: string, clientSecret: string, refreshToken: string): Promise<AccessToken>;
    /**
     * Retrieves information about an access token.
     *
     * @deprecated Use `getTokenInfo` from `twitch-auth` instead.
     *
     * @param clientId The client ID of your application.
     * @param accessToken The access token to get the information of.
     *
     * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
     */
    static getTokenInfo(accessToken: string, clientId?: string): Promise<TokenInfo>;
    /**
     * Creates a new API client instance.
     *
     * @param config Configuration for the client instance.
     */
    constructor(config: Partial<ApiConfig>);
    /**
     * Retrieves information about your access token.
     */
    getTokenInfo(): Promise<TokenInfo>;
    /**
     * Retrieves an access token for the authentication provider.
     *
     * @param scopes The scopes to request.
     *
     * @deprecated Use {@AuthProvider#getAccessToken} directly instead.
     */
    getAccessToken(scopes?: string | string[]): Promise<AccessToken | null>;
    /**
     * The scopes that are currently available using the access token.
     *
     * @deprecated Use {@AuthProvider#currentScopes} directly instead.
     */
    get currentScopes(): string[];
    /** @private */
    setAccessToken(token: AccessToken): void;
    /**
     * Forces the authentication provider to refresh the access token, if possible.
     *
     * @deprecated Use {@AuthProvider#refresh} directly instead.
     */
    refresh(): Promise<AccessToken | null>;
    /**
     * Forces the authentication provider to refresh the access token, if possible.
     *
     * @deprecated Use {@AuthProvider#refresh} directly instead.
     */
    refreshAccessToken(): Promise<AccessToken | undefined>;
    /**
     * The type of token used by the client.
     */
    get tokenType(): AuthProviderTokenType;
    /**
     * The client ID of your application.
     */
    get clientId(): string;
    /**
     * Makes a call to the Twitch API using your access token.
     *
     * @param options The configuration of the call.
     */
    callApi<T = any>(options: TwitchApiCallOptions): Promise<T>;
    /**
     * Makes a call to the Twitch API using your access token.
     *
     * @deprecated Use callApi instead.
     *
     * @param options The configuration of the call.
     */
    callAPI<T = any>(options: TwitchApiCallOptions): Promise<T>;
    /**
     * The default specs for cheermotes.
     */
    get cheermoteDefaults(): TwitchCheermoteConfig;
    /**
     * A group of Kraken API methods.
     */
    get kraken(): KrakenApiGroup;
    /**
     * A group of Helix API methods.
     */
    get helix(): HelixApiGroup;
    /**
     * The API methods that deal with badges.
     */
    get badges(): BadgesApi;
    /**
     * Various API methods that are not officially supported by Twitch.
     */
    get unsupported(): UnsupportedApi;
    private _callApiInternal;
}
