import { __extends } from "tslib";
import { CustomError } from "./CustomError.mjs";
/**
 * Thrown whenever a HTTP error occurs. Some HTTP errors are handled in the library when they're expected.
 */
var HttpStatusCodeError = /** @class */ (function (_super) {
    __extends(HttpStatusCodeError, _super);
    /** @private */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function HttpStatusCodeError(statusCode, statusText, body) {
        var _this = _super.call(this, "Encountered HTTP status code " + statusCode + ": " + statusText + "\n\nBody:\n" + JSON.stringify(body, null, 2)) || this;
        _this._statusCode = statusCode;
        _this._body = body;
        return _this;
    }
    Object.defineProperty(HttpStatusCodeError.prototype, "statusCode", {
        get: function () {
            return this._statusCode;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HttpStatusCodeError.prototype, "body", {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        get: function () {
            return this._body;
        },
        enumerable: false,
        configurable: true
    });
    return HttpStatusCodeError;
}(CustomError));
export { HttpStatusCodeError };
