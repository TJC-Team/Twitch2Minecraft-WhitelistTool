import { AllowedNames } from '@d-fischer/shared-utils';
import { ServerProperties } from '../ServerProperties';
export interface MessagePrefix {
    nick: string;
    user?: string;
    host?: string;
}
export interface MessageParam {
    value: string;
    trailing: boolean;
}
export interface MessageParamSpecEntry {
    trailing?: boolean;
    rest?: boolean;
    optional?: boolean;
    noClient?: boolean;
    noServer?: boolean;
    type?: 'channel' | 'channelList';
    match?: RegExp;
}
export interface MessageConstructor<T extends Message<T> = any> extends Function {
    COMMAND: string;
    PARAM_SPEC?: MessageParamSpec<T>;
    SUPPORTS_CAPTURE: boolean;
    new (command: string, params?: MessageParam[], tags?: Map<string, string>, prefix?: MessagePrefix, serverProperties?: ServerProperties, rawLine?: string, isServer?: boolean, shouldParseParams?: boolean): T;
    getMinParamCount(isServer?: boolean): number;
    checkParam(param: string, spec: MessageParamSpecEntry, serverProperties?: ServerProperties): boolean;
}
export declare type MessageParamNames<T extends Message<T>> = AllowedNames<Omit<T, 'params'>, MessageParam | undefined>;
export declare type MessageParams<T extends Message<T>> = Record<MessageParamNames<T>, MessageParam>;
export declare type MessageParamValues<T extends Message<T>> = Record<MessageParamNames<T>, string>;
export declare type MessageParamSpec<T extends Message<T>> = Record<MessageParamNames<T>, MessageParamSpecEntry>;
export declare function prefixToString(prefix: MessagePrefix): string;
export declare function createMessage<T extends Message<T>>(type: MessageConstructor<T>, params: Partial<MessageParamValues<T>>, prefix?: MessagePrefix, tags?: Map<string, string>, serverProperties?: ServerProperties, isServer?: boolean): T;
export declare class Message<T extends Message<T> = any> {
    static readonly COMMAND: string;
    static readonly PARAM_SPEC: MessageParamSpec<any>;
    static readonly SUPPORTS_CAPTURE: boolean;
    protected _tags: Map<string, string>;
    protected _prefix?: MessagePrefix;
    protected _command: string;
    protected _params?: MessageParam[];
    protected _serverProperties: ServerProperties;
    private readonly _raw?;
    static checkParam(param: string, spec: MessageParamSpecEntry, serverProperties?: ServerProperties): boolean;
    static getMinParamCount(isServer?: boolean): number;
    constructor(command: string, params?: MessageParam[], tags?: Map<string, string>, prefix?: MessagePrefix, serverProperties?: ServerProperties, rawLine?: string, isServer?: boolean, shouldParseParams?: boolean);
    prefixToString(): string;
    tagsToString(): string;
    toString(complete?: boolean): string;
    /** @private */
    _initPrefixAndTags(prefix?: MessagePrefix, tags?: Map<string, string>): void;
    parseParams(isServer?: boolean): void;
    get params(): MessageParamValues<T>;
    get prefix(): MessagePrefix | undefined;
    get command(): string;
    get tags(): Map<string, string>;
    get rawLine(): string | undefined;
    isResponseTo(originalMessage: Message): boolean;
    endsResponseTo(originalMessage: Message): boolean;
    _acceptsInReplyCollection(message: Message): boolean;
}
