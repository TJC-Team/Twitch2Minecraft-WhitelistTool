"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageCollector = void 0;
var tslib_1 = require("tslib");
var MessageCollector = /** @class */ (function () {
    function MessageCollector(_client, _originalMessage) {
        var types = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            types[_i - 2] = arguments[_i];
        }
        this._client = _client;
        this._originalMessage = _originalMessage;
        this._messages = [];
        this._endEventHandlers = new Map();
        this._types = new Set(types);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    MessageCollector.prototype.untilEvent = function (eventType) {
        var _this = this;
        this._cleanEndEventHandler(eventType);
        var listener = this._client.on(eventType, function () { return _this.end(); });
        this._endEventHandlers.set(eventType, listener);
    };
    MessageCollector.prototype.promise = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                if (!this._promise) {
                    this._promise = new Promise(function (resolve) { return (_this._promiseResolve = resolve); });
                }
                return [2 /*return*/, this._promise];
            });
        });
    };
    MessageCollector.prototype.collect = function (message) {
        if (!this._originalMessage._acceptsInReplyCollection(message)) {
            return false;
        }
        this._messages.push(message);
        if (message.endsResponseTo(this._originalMessage)) {
            this.end();
        }
        return true;
    };
    MessageCollector.prototype.end = function () {
        this._client.stopCollect(this);
        this._cleanEndEventHandlers();
        if (this._promiseResolve) {
            this._promiseResolve(this._messages);
        }
    };
    MessageCollector.prototype._cleanEndEventHandlers = function () {
        var _this = this;
        this._endEventHandlers.forEach(function (listener) { return _this._client.removeListener(listener); });
        this._endEventHandlers.clear();
    };
    MessageCollector.prototype._cleanEndEventHandler = function (eventType) {
        if (this._endEventHandlers.has(eventType)) {
            this._client.removeListener(this._endEventHandlers.get(eventType));
            this._endEventHandlers.delete(eventType);
        }
    };
    return MessageCollector;
}());
exports.MessageCollector = MessageCollector;
