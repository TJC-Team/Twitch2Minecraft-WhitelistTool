"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mode = void 0;
var tslib_1 = require("tslib");
var UnknownChannelModeCharError_1 = require("../../../Errors/UnknownChannelModeCharError");
var StringTools_1 = require("../../../Toolkit/StringTools");
var Message_1 = require("../../Message");
var MessageDefinition_1 = require("../../MessageDefinition");
var Mode = /** @class */ (function (_super) {
    tslib_1.__extends(Mode, _super);
    function Mode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Mode.prototype, "isChannel", {
        get: function () {
            return StringTools_1.isChannel(this.params.target, this._serverProperties.channelTypes);
        },
        enumerable: false,
        configurable: true
    });
    Mode.prototype.separate = function () {
        var e_1, _a;
        var result = [];
        var modeRestParam = this.params.modes;
        if (!modeRestParam) {
            throw new Error("can't separate a channel mode request, just set actions");
        }
        var modeParams = modeRestParam.split(' ');
        var modes = modeParams.shift();
        var currentModeAction = 'add';
        try {
            for (var modes_1 = tslib_1.__values(modes), modes_1_1 = modes_1.next(); !modes_1_1.done; modes_1_1 = modes_1.next()) {
                var ch = modes_1_1.value;
                var thisModeAction = currentModeAction;
                switch (ch) {
                    case '+': {
                        currentModeAction = 'add';
                        break;
                    }
                    case '-': {
                        currentModeAction = 'remove';
                        break;
                    }
                    default: {
                        var requiresParam = false;
                        var known = true;
                        if (this.isChannel) {
                            if (this._serverProperties.supportedChannelModes.alwaysWithParam.includes(ch) ||
                                this._serverProperties.supportedChannelModes.prefix.includes(ch)) {
                                requiresParam = true;
                            }
                            else if (this._serverProperties.supportedChannelModes.paramWhenSet.includes(ch)) {
                                if (currentModeAction === 'add') {
                                    requiresParam = true;
                                }
                            }
                            else if (this._serverProperties.supportedChannelModes.list.includes(ch)) {
                                if (modeParams.length) {
                                    requiresParam = true;
                                }
                                else {
                                    thisModeAction = 'getList';
                                }
                            }
                            else if (this._serverProperties.supportedChannelModes.noParam.includes(ch)) {
                                // whatever
                            }
                            else {
                                throw new UnknownChannelModeCharError_1.UnknownChannelModeCharError(ch);
                            }
                        }
                        else {
                            // user modes never have a param
                            // also, they don't break the whole command if invalid mode letters are given
                            known = this._serverProperties.supportedUserModes.includes(ch);
                        }
                        if (requiresParam && !modeParams.length) {
                            continue;
                        }
                        result.push({
                            prefix: this._prefix,
                            action: thisModeAction,
                            letter: ch,
                            param: requiresParam ? modeParams.shift() : undefined,
                            known: known
                        });
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (modes_1_1 && !modes_1_1.done && (_a = modes_1.return)) _a.call(modes_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result;
    };
    tslib_1.__decorate([
        MessageDefinition_1.MessageParamDefinition({})
    ], Mode.prototype, "target", void 0);
    tslib_1.__decorate([
        MessageDefinition_1.MessageParamDefinition({
            rest: true,
            optional: true
        })
    ], Mode.prototype, "modes", void 0);
    Mode = tslib_1.__decorate([
        MessageDefinition_1.MessageType('MODE')
    ], Mode);
    return Mode;
}(Message_1.Message));
exports.Mode = Mode;
